#!/usr/bin/env python

import os, sys
import toml

from subprocess import getoutput, Popen, PIPE
from random import randint, choice
from pathlib import Path
from time import sleep


class Colors:
    res = "\033[0m"
    bla = "\033[30m"
    red = "\033[31m"
    gre = "\033[32m"
    yel = "\033[33m"
    blu = "\033[34m"
    pin = "\033[35m"
    cya = "\033[36m"
    whi = "\033[37m"


class TUI:
    def __init__(self):
        self.color = Colors()

    def clear(self):
        os.system("clear")

    def select_color(self, color):
        match color:
            case "res":
                chosen = self.color.res
            case "bla":
                chosen = self.color.bla
            case "red":
                chosen = self.color.red
            case "gre":
                chosen = self.color.gre
            case "yel":
                chosen = self.color.yel
            case "blu":
                chosen = self.color.blu
            case "pin":
                chosen = self.color.pin
            case "cya":
                chosen = self.color.cya
            case _:
                chosen = self.color.whi
        return chosen

    def show_cursor(self):
        sys.stdout.write("\033[?25h")
        sys.stdout.flush()

    def hide_cursor(self):
        sys.stdout.write("\033[?25l")
        sys.stdout.flush()

    def draw_box(self, line, color="", all_caps=False, titler=False):
        col = self.select_color(color)
        res = self.color.res
        lines = line.split("//")
        ltop = "┌"
        rtop = "┐"
        lbot = "└"
        rbot = "┘"
        hchar = "─"
        vchar = "│"
        maxlen = 0
        for line in lines:
            if len(line) > maxlen + 4:
                maxlen = len(line) + 4
        hline = maxlen * hchar
        topline = f"{col}{ltop}{hline}{rtop}{res}"
        botline = f"{col}{lbot}{hline}{rbot}{res}"
        print(topline)
        for c, line in enumerate(lines):
            if c == 0 and all_caps:
                line = line.upper()
            elif c == 0 and titler:
                line = line.title()

            spaces = round((maxlen - len(line)) // 2) * " "
            line = f"{col}{vchar}{spaces}{res}{line}{col}{spaces}{vchar}{res}"
            print(line)
        print(botline)

    def info(self, message):
        print(f"{message}")

    def message(self, message):
        col = self.color.gre
        res = self.color.res
        print(f"{col}>>{res} {message}")

    def warning(self, message):
        col = self.color.yel
        res = self.color.res
        print(f"{col}>>{res} {message}")

    def error(self, message):
        col = self.color.red
        res = self.color.res
        print(f"{col}>>{res} {message}")

    def notice(self, message, secs_to_wait=0):
        col = self.color.blu
        res = self.color.res
        print(f"{col}->{res} {message}")
        if secs_to_wait > 0:
            sleep(secs_to_wait)

    def on_off_switch(self, status):
        gre = self.color.gre
        red = self.color.red
        res = self.color.res
        if status == "on":
            switch = f"[{gre}ON {res}]"
        else:
            switch = f"[{red}OFF{res}]"
        return switch


class FileIO:
    def __init__(self):
        # --- Setup Waller config variable
        userdir = os.path.expanduser("~")
        self.configfile = os.path.join(userdir, ".config", "waller", "waller.toml")

        # --- Setup valid extensions
        self.valid_extensions = [".jpg", ".jpeg", ".png", ".JPG", ".JPEG", ".PNG"]
        self.jpg_extensions = [".jpg", ".jpeg", ".JPG", ".JPEG"]

    def read_config(self):
        with open(self.configfile, "r") as f:
            data = toml.load(f)
        return data

    def save_config(self, data):
        with open(self.configfile, "w") as f:
            toml.dump(data, f)

    def gather_all_wallpapers(self, path):
        wallpapers = []
        for file in os.listdir(path):
            if Path(file).suffix.lower() in self.valid_extensions:
                wallpapers.append(file)
        wallpapers.sort()
        return wallpapers


class Utils:
    def __init__(self):
        self.fileio = FileIO()
        self.color = Colors()
        self.tui = TUI()
        self.config = self.fileio.read_config()
        self.wallpapers = self.fileio.gather_all_wallpapers(
            self.construct_path2wallpapers()
        )
        self.title = "Waller v2.01 //Copyright © 2020-2022 Transgirl"

    def get_output(self, command):
        output = getoutput(command)
        return output

    def execute_root_command(self, command):
        args = ["sudo", "-S"]
        command = command.split()
        p = Popen(args + command, stdin=PIPE, stderr=PIPE, universal_newlines=True)
        r = p.communicate(self.config["password"] + "\n")[1]
        del r

    def change_sddm_grub_wallpapers(self):
        jpg = [".jpg", ".jpeg"]
        curwall = self.construct_wallpaperpath()
        sddmpath = self.config["sddmbg"]
        grubpath = self.config["grubbg"]
        if Path(curwall).suffix.lower() in jpg:
            cmd = "convert"
        else:
            cmd = "cp"

        if self.config["sddm"]:
            sddm_command = f"<COMMAND> {curwall} {sddmpath}".replace("<COMMAND>", cmd)
            self.execute_root_command(sddm_command)

        if self.config["grub"]:
            grub_command = f"<COMMAND> {curwall} {grubpath}".replace("<COMMAND>", cmd)
            self.execute_root_command(grub_command)

    def get_timer_time_left(self):
        gre = self.color.gre
        red = self.color.red
        res = self.color.res
        output = self.get_output("systemctl --user status wallpaper.timer").split(" ")
        if "left\n" in output:
            idx = output.index("left\n") - 1
            timeleft = output[idx]
            if "min" in timeleft:
                idx = output.index("left\n") - 2
                timeleft = output[idx] + " " + timeleft
            return f"{gre}{timeleft}{res}"
        else:
            return f"{red}disabled{res}"

    def get_current_number(self, wallpaper):
        number = wallpaper.split(".")[0].split("-")[1]
        return int(number)

    def construct_path2wallpapers(self, style="", category=""):
        walldir = self.config["walldir"]
        if style == "":
            style = self.config["style"]
        if category == "":
            category = self.config["category"]
        return os.path.join(walldir, style, category)

    def construct_wallpaperpath(self, style="", category="", wallpaper=""):
        walldir = self.config["walldir"]
        if style == "":
            style = self.config["style"]
        if category == "":
            category = self.config["category"]
        if wallpaper == "":
            wallpaper = self.config["curwall"]
        return os.path.join(walldir, style, category, wallpaper)

    def change_wallpaper_folder(self, walldir):
        path = self.construct_path2wallpapers(category=walldir)
        self.wallpapers = self.fileio.gather_all_wallpapers(path)
        example = choice(self.wallpapers)
        self.config["prefix"] = example.split("-")[0]
        self.config["suffix"] = example.split(".")[1]
        self.config["category"] = walldir
        self.config["curwall"] = ""
        self.fileio.save_config(self.config)

    def set_wallpaper(self):
        path = self.construct_wallpaperpath()
        if self.config["setter"] == "feh":
            command = f"feh --bg-scale {path}"
        else:
            command = f"nitrogen --save-bg --bg-scaled {path}"
        os.system(command)
        self.change_sddm_grub_wallpapers()

    def choose_next_wallpaper(self):
        if self.config["curwall"] != "":
            prefix = self.config["prefix"]
            suffix = self.config["suffix"]
            number = self.get_current_number(self.config["curwall"]) + 1
            if number > len(self.wallpapers):
                number = 1
            new_wallpaper = f"{prefix}-{number:05}.{suffix}"
        else:
            new_wallpaper = self.wallpapers[0]

        self.config["curwall"] = new_wallpaper
        self.fileio.save_config(self.config)
        self.set_wallpaper()

    def choose_previous_wallpaper(self):
        if self.config["curwall"] != "":
            prefix = self.config["prefix"]
            suffix = self.config["suffix"]
            number = self.get_current_number(self.config["curwall"]) - 1
            if number <= 0:
                number = len(self.wallpapers)
            new_wallpaper = f"{prefix}-{number:05}.{suffix}"
        else:
            new_wallpaper = self.wallpapers[0]
        self.config["curwall"] = new_wallpaper
        self.fileio.save_config(self.config)
        self.set_wallpaper()

    def choose_random_wallpaper(self):
        new_wallpaper = choice(self.wallpapers)
        self.config["curwall"] = new_wallpaper
        self.fileio.save_config(self.config)
        self.set_wallpaper()

    def toggle_sddm_change(self):
        if self.config["sddm"]:
            self.config["sddm"] = False
        else:
            self.config["sddm"] = True
        self.fileio.save_config(self.config)
        self.show_long_info()

    def toggle_grub_change(self):
        if self.config["grub"]:
            self.config["grub"] = False
        else:
            self.config["grub"] = True
        self.fileio.save_config(self.config)
        self.show_long_info()

    def toggle_auto_change(self):
        command = "systemctl --user <COMMAND> --now wallpaper.timer >/dev/null 2>&1"
        if self.config["auto"]:
            self.config["auto"] = False
            command = command.replace("<COMMAND>", "disable")
        else:
            self.config["auto"] = True
            command = command.replace("<COMMAND>", "enable")
        os.system(command)
        self.fileio.save_config(self.config)
        self.tui.notice(
            "Giving 'systemctl' some time to process change ...", secs_to_wait=2
        )
        self.show_long_info()

    def show_short_info(self):
        col = self.color.gre
        res = self.color.res
        curwall = self.config["curwall"]
        timeleft = self.get_timer_time_left()

        self.tui.clear()
        self.tui.draw_box(self.title, color="yel", titler=True)
        self.tui.info(f"Current wallpaper : {col}{curwall}{res}")
        self.tui.info(f"Time left         : {timeleft}")
        exit()

    def show_long_info(self):
        gre = self.color.gre
        res = self.color.res
        curwall = self.config["curwall"]
        walldir = self.config["walldir"]
        setter = self.config["setter"]
        style = self.config["style"]
        category = self.config["category"]
        total = len(self.wallpapers)

        if self.config["sddm"]:
            sddm_switch = self.tui.on_off_switch("on")
        else:
            sddm_switch = self.tui.on_off_switch("off")

        if self.config["grub"]:
            grub_switch = self.tui.on_off_switch("on")
        else:
            grub_switch = self.tui.on_off_switch("off")

        if self.config["auto"]:
            auto_switch = self.tui.on_off_switch("on")
        else:
            auto_switch = self.tui.on_off_switch("off")

        if self.config["random"]:
            random_switch = self.tui.on_off_switch("on")
        else:
            random_switch = self.tui.on_off_switch("off")

        self.tui.clear()
        self.tui.draw_box(self.title, color="yel", titler=True)
        self.tui.message("Wallpaper information:")
        self.tui.info(f"Current wallpaper  : {gre}{curwall}{res}")
        if self.config["auto"]:
            timeleft = self.get_timer_time_left()
            self.tui.info(f"Time left          : {timeleft}")
        print()
        self.tui.message("Configuration:")
        self.tui.info(f"Wallpaper setter   : {gre}{setter}{res}")
        self.tui.info(f"Wallpaper folder   : {gre}{walldir}{res}")
        self.tui.info(f"Wallpaper style    : {gre}{style}{res}")
        self.tui.info(f"Wallpaper category : {gre}{category}{res}")
        self.tui.info(f"Total wallpapers   : {gre}{total}{res}")

        print()
        self.tui.message("Switches:")
        self.tui.info(f"Auto wallpaper change : {auto_switch}")
        self.tui.info(f"Randomize wallpaper   : {random_switch}")
        self.tui.info(f"Change SDDM wallpaper : {sddm_switch}")
        self.tui.info(f"Change GRUB wallpaper : {grub_switch}")


class Waller:
    def __init__(self):
        self.utils = Utils()

    def run(self, arg):
        if "folder=" in arg:
            path = arg.split("=")[1]
            arg = "folder"
        else:
            path = ""
        match arg:
            case "next":
                self.utils.choose_next_wallpaper()
            case "previous" | "prev":
                self.utils.choose_previous_wallpaper()
            case "random":
                self.utils.choose_random_wallpaper()
            case "id":
                self.utils.show_short_info()
            case "info":
                self.utils.show_long_info()
            case "auto":
                self.utils.toggle_auto_change()
            case "grub":
                self.utils.toggle_grub_change()
            case "sddm":
                self.utils.toggle_sddm_change()
            case "folder":
                if path == "":
                    path = self.utils.config["category"]
                self.utils.change_wallpaper_folder(path)
                self.utils.choose_next_wallpaper()
            case _:
                print(f"ERROR: {arg}")
                print("You will have to be clearer than that, I'm afraid...")
                exit()


if __name__ == "__main__":
    waller = Waller()
    arg = "next" if len(sys.argv) == 1 else sys.argv[1]
    waller.run(arg)
