#!/usr/bin/env python

import os
import sys
from PIL import ImageGrab
from time import sleep
from dataclasses import dataclass


@dataclass
class Settings:
    record_audio: bool
    record_mouse: bool
    record_overwrite: bool
    record_delay: int
    record_framerate: int
    record_filename: str
    record_screensize: str


class Capture:
    def __init__(self):
        self.set_default_settings()
        self.cwd = os.getcwd()

    def determine_screensize(self):
        img = ImageGrab.grab()
        return f"{img.size[0]}x{img.size[1]}"

    def set_default_settings(self):
        Settings.record_screensize = self.determine_screensize()
        Settings.record_audio = True
        Settings.record_mouse = True
        Settings.record_overwrite = True
        Settings.record_delay = 0
        Settings.record_framerate = 50
        Settings.record_filename = 'output.mp4'

    def construct_ffmpeg_command(self):
        cmd = "ffmpeg "
        cmd += "-y " if Settings.record_overwrite else ""
        if Settings.record_audio:
            cmd += "-f pulse "
            cmd += "-ac 2 "
            cmd += "-thread_queue_size 4096 "
            cmd += "-i default "
        cmd += "-draw_mouse 1 " if Settings.record_mouse else "-draw_mouse 0 "
        cmd += "-f x11grab "
        cmd += "-video_size 1920x1080 "
        cmd += f"-framerate {Settings.record_framerate} "
        cmd += "-i :0.0+0,0 "
        cmd += "-vf format=yuv420p "
        cmd += f"{Settings.record_filename}"
        return cmd

    def show_help(self):
        os.system('clear')
        print("CAPTURE")
        print("A simple screenrecording script", end="\n\n")
        print('Usage:')
        print(
            "\t$ capture [-na,-no-audio] [-nm,-no-mouse] [-d,-delay secs] [filename]",
            end="\n\n"
        )
        print('Options:')
        print("\t-na,-no-audio\tDon't capture audio")
        print("\t-nm,-no-mouse\tDon't capture the mouse")
        print("\t-no,-no-overwrite\tDon't overwrite output file")
        print("\t-d,-delay secs\tDelay before start recording in seconds")
        print(
            "\tfilename\tName of the recording, ex.: output.webm",
            end="\n\n"
        )
        print("\tAlways add the filename last!")
        exit()

    def check_arguments(self, args):
        print(args)
        for key in args:
            key = key.lower()
            if key in ["-nm", "-no-mouse"]:
                Settings.record_mouse = False
            elif key in ['-na', '-no-audio']:
                Settings.record_audio = False
            elif key in ['-no', '-no-overwrite']:
                Settings.record_overwrite = False
            elif key in ['-d', '-delay']:
                idx = args.index(key) + 1
                Settings.record_delay = int(args[idx])
            elif key in ['-h', '--help']:
                self.show_help()

        Settings.record_filename = args[-1]

    def record_screen(self, args=[]):
        if len(args) != 0:
            self.check_arguments(args)
        cmd = self.construct_ffmpeg_command()
        os.system('clear')
        d = Settings.record_delay
        print(f"Wating {d} seconds before I start recording...")
        if Settings.record_delay > 0:
            sleep(Settings.record_delay)
        os.system(cmd)


if __name__ == "__main__":
    capture = Capture()
    if len(sys.argv) > 1:
        capture.record_screen(sys.argv)
    else:
        capture.record_screen()
