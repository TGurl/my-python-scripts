#!/usr/bin/env python3

import os
import sys
import signal

from pytube import YouTube, Playlist
from time import sleep


# -------------------------------------------------------
# --- Class Colors
# -------------------------------------------------------
class Colors:
    res = "\033[0m"
    bla = "\033[30;1m"
    red = "\033[31;1m"
    gre = "\033[32;1m"
    yel = "\033[33;1m"
    blu = "\033[34;1m"
    pin = "\033[35;1m"
    cya = "\033[36;1m"
    whi = "\033[37;1m"
    gray = "\033[37m"


# -------------------------------------------------------
# --- Class YouTube
# -------------------------------------------------------
class YouTubeDL:
    def __init__(self):
        self.plurl = "https://www.youtube.com/playlist?list=<-ID->"
        self.vurl = "https://www.youtube.com/watch?v=<-ID->"

    def fetch_playlist(self, plid):
        print(">> Fetching playlist...")
        url = self.plurl.replace("<-ID->", plid)
        # cursor up one line
        sys.stdout.write('\x1b[1A')
        # delete last line
        sys.stdout.write('\x1b[2K')
        return Playlist(url)

    def fetch_video_title(self, vid, oneshot=False):
        url = self.vurl.replace("<-ID->", vid)
        yt = YouTube(url)
        if not oneshot:
            title = yt.title.split(" | ")[0]
        else:
            title = yt.title
        return title


# -------------------------------------------------------
# --- Class Terminal User Interface (TUI)
# -------------------------------------------------------
class TUI:
    def __init__(self) -> None:
        self.colors = Colors()
        self.titles = [
            "Vox Machina",
            "Mighty Nein",
            "Bells Hells",
            "One Shots"
        ]
        self.plids = [
            "PL1tiwbzkOjQz7D0l_eLJGAISVtcL7oRu_",
            "PL1tiwbzkOjQxD0jjAE7PsWoaCrs0EkBH2",
            "PL1tiwbzkOjQydg3QOkBLG9OYqWJ0dwlxF",
            "PL1tiwbzkOjQyUR1nbxZGETYMZRCcfV6yL"
        ]

    def return_title(self, idx):
        return self.titles[idx]

    def return_plid(self, idx):
        return self.plids[idx]

    def print_title(self):
        col = self.colors.yel
        res = self.colors.res
        line = 7 * "â”€"
        os.system('clear')
        print(f"{col}{line}{res} CritView {col}{line}{res}")

    def print_menu(self, watch_in_hd=False, single=False):
        valid = ["q", "h", "e"]
        self.print_title()
        for c, item in enumerate(self.titles):
            valid.append(str(c + 1))
            print(f"{c + 1}. {item}")
        print()
        if watch_in_hd:
            resolution = "HD"
        else:
            resolution = "SD"

        if single:
            play_single = "Watch a specific episode"
        else:
            play_single = "Continue series"

        print(f"e. {play_single}")
        print(f"h. Watch in {resolution}")
        print("q. Quit")
        print()
        return valid


class CritView:
    def __init__(self) -> None:
        self.tui = TUI()
        self.hd = False
        self.single = False
        self.oneshot = False
        self.ytdl = YouTubeDL()

    def handler(self, signum, frame):
        _ = signum
        _ = frame
        os.system('clear')
        print(">> CTRL-C detected. Script terminated.")
        exit()

    def get_video_title(self, vid):
        title = self.ytdl.fetch_video_title(vid)
        return title

    def get_playlist(self, plid):
        playlist = self.ytdl.fetch_playlist(plid)
        return playlist

    def ask_for_episode(self, total):
        subloop = True
        answer = ""
        while subloop:
            answer = input(
                f"Which episode do you want to see (0..{total})? : "
            )
            if answer.isnumeric() and int(answer) <= total:
                subloop = False
            else:
                print(f">> Please enter a number between 0 and {total}!")
                sleep(2)
        return int(answer)


    def play_playlist(self, idx, oneshot):
        self.tui.print_title()
        plid = self.tui.return_plid(idx)
        playlist = self.get_playlist(plid)
        total = len(playlist)

        if self.single:
            result = self.ask_for_episode(total)
            vid = playlist[result + 1]
            title = self.ytdl.fetch_video_title(vid, oneshot)
            print(title)
            sleep(2)
        else:
            pass

    def run(self):
        signal.signal(signal.SIGINT, self.handler)
        loop = True
        while loop:
            self.oneshot = False
            valid = self.tui.print_menu(
                watch_in_hd=self.hd,
                single=self.single
            )
            answer = input("> What do you want to do today? : ").lower()
            if answer == "h":
                self.hd = not self.hd
            elif answer == "e":
                self.single = not self.single
            elif answer == "q":
                loop = False
            elif answer in valid:
                if answer == "4":
                    self.oneshot = True
                idx = int(answer) - 1
                self.play_playlist(idx, self.oneshot)
                sleep(3)
            else:
                print(">> You rolled a natural one...")
                sleep(1)

        os.system('clear')
        print("Bye!")


if __name__ == "__main__":
    critview = CritView()
    critview.run()
