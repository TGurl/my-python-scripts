#!/usr/bin/env python

import os
import sys
import select
import toml

from pytube import Playlist, YouTube

class Colors:
    reset = "\033[0m"
    black = "\033[30m"
    red = "\033[31m"
    green = "\033[32m"
    yellow = "\033[33m"
    blue = "\033[34m"
    pink = "\033[35m"
    cyan = "\033[36m"
    white = "\033[37m"


class Tools:
    def __init__(self):
        self.colors = Colors()
        self.scriptdir = os.path.abspath(os.path.dirname(__file__))
        self.configfile = os.path.join(self.scriptdir, 'config.toml')
        

    # -----------------------------------------------------------------------------
    # --- Messages
    # -----------------------------------------------------------------------------
    def message(self, msg):
        col = self.colors.green
        res = self.colors.reset
        print(f"{col}>{res} {msg}")

    def warning(self, msg):
        col = self.colors.yellow
        res = self.colors.reset
        print(f"{col}>{res} {msg}")

    def error(self, msg):
        col = self.colors.red
        res = self.colors.reset
        print(f"{col}>{res} {msg}")

    def steptaken(self, msg):
        col = self.colors.blue
        res = self.colors.reset
        print(f"{col}>{res} {msg}")

    def debug(self, msg):
        col = self.colors.pink
        res = self.colors.reset
        print(f"{col}>{res} {msg}")

    def notify(self, msg):
        cmd = f"notify-send -u low '{msg}'"
        os.system(cmd)

    # -----------------------------------------------------------------------------
    # --- Get Input from User
    # -----------------------------------------------------------------------------
    def timeout_input(self, prompt, timeout=3, default=""):
        print(prompt, end=": ", flush=True)
        inputs, _, _ = select.select([sys.stdin], [], [], timeout)
        print()
        return (0, sys.stdin.readline().strip()) if inputs else (-1, default)

    # -----------------------------------------------------------------------------
    # --- TOML
    # -----------------------------------------------------------------------------
    def read_toml(self):
        with open(self.configfile, 'r') as f:
            data = toml.load(f)
        return data

    def save_toml(self, data):
        with open(self.configfile, 'w') as f:
            toml.dump(data, f)

    # -----------------------------------------------------------------------------
    # --- YouTube
    # -----------------------------------------------------------------------------
    def get_title(self, url):
        yt = YouTube(url)
        if " | " in yt.title:
            title = yt.title.split(" | ")[0]
        return title

    def get_playlist(self, streamID):
        url = f"https://www.youtube.com/playlist?list={streamID}"
        p = Playlist(url)
        return p


class CritView:
    def __init__(self):
        self.tools = Tools()
        self.config = self.tools.read_toml()
        self.debug = False
        self.hd = False
        self.vm = False
        self.m9 = False
        self.bh = False
        self.os = False
        self.voxmachina = "PL1tiwbzkOjQz7D0l_eLJGAISVtcL7oRu_"
        self.mightynein = "PL1tiwbzkOjQxD0jjAE7PsWoaCrs0EkBH2"
        self.bellshells = "PL1tiwbzkOjQydg3QOkBLG9OYqWJ0dwlxF"
        self.oneshots = "PL1tiwbzkOjQyUR1nbxZGETYMZRCcfV6yL"

    def check_args(self, args):
        if 'hd' in args:
            self.hd = True

        count = 0        
        if 'vm' in args:
            if self.debug:
                self.tools.debug("Playing Vox Machina")
            self.vm = True
            count += 1

        if 'm9' in args:
            if self.debug:
                self.tools.debug("Playing Mighty Nein")
            self.m9 = True
            count += 1

        if 'bh' in args:
            if self.debug:
                self.tools.debug("Playing Bells Hells")
            self.bh = True
            count += 1

        if 'os' in args:
            if self.debug:
                self.tools.debug("Playing One Shots")
            self.bh = True
            count += 1

        if count > 1:
            print("You can't watch them all at once,")
            print("You will have to make a choice...")
            exit()

    def fetch_voxmachina(self):
        self.tools.notify("Fetching Vox Machina Playlist...")
        playlist = self.tools.get_playlist(self.voxmachina)
        return playlist

    def fetch_mightynein(self):
        self.tools.notify("Fetching Mighty Nein Playlist...")
        playlist = self.tools.get_playlist(self.mightynein)
        return playlist

    def fetch_bellshells(self):
        self.tools.notify("Fetching Bells Hells Playlist...")
        playlist = self.tools.get_playlist(self.bellshells)
        return playlist

    def fetch_oneshots(self):
        self.tools.notify("Fetching One Shot Playlist...")
        playlist = self.tools.get_playlist(self.oneshots)
        return playlist

    def start_playing(self):
        if self.vm:
            playlist = self.fetch_voxmachina()
            lastvideoID = self.config['last_voxmachina']
        elif self.m9:
            playlist = self.fetch_mightynein()
            lastvideoID = self.config['last_mightynein']
        elif self.bh:
            playlist = self.fetch_bellshells()
            lastvideoID = self.config['last_bellshells']
        elif self.os:
            playlist = self.oneshots()
            lastvideoID = self.config['last_oneshots']
        else:
            self.tools.error("That's not something from Critical Role, I think...")
            exit()

        videoURL = playlist[lastvideoID]
        title = self.tools.get_title(videoURL)

        if self.debug:
            self.tools.debug(f"Title : '{title}'")
            self.tools.debug(f"Last VideoURL: {videoURL}")
            self.tools.debug(f"Last VideoID : {lastvideoID}")

        self.tools.notify(f"Playing: {title}")
        cmd = f"mpv -hwdec --slang=en {videoURL}"
        os.system(cmd)
        answer = self.tools.timeout_input('Continue to the next episode? (Y/n): ', timeout=5, default='y')
        print(answer)

        


    def run(self, args=[]):
        if len(args) > 0:
            self.check_args(args)
            self.start_playing()
        else:
            pass
        


if __name__ == "__main__":
    cv = CritView()
    if len(sys.argv) > 1:
        cv.run(sys.argv[1:])
    else:
        cv.run()
