#!/usr/bin/env python

import os
from PIL import Image
from pathlib import Path
from time import sleep


class Colors:
    reset = "\033[0m"
    black = "\033[30m"
    red = "\033[31m"
    green = "\033[32m"
    yellow = "\033[33m"
    blue = "\033[34m"
    pink = "\033[35m"
    cyan = "\033[36m"
    white = "\033[37m"


class Resize:
    def __init__(self):
        self.colors = Colors()
        self.cwd = os.getcwd()
        self.images = self.get_all_images()
        self.basewidth = 1920
        self.delay = 1

    def message(self, message):
        col = self.colors.green
        res = self.colors.reset
        print(f"{col}►{res} {message}")

    def error(self, message):
        col = self.colors.red
        res = self.colors.reset
        print(f"{col}►{res} {message}")

    def info(self, message):
        col = self.colors.blue
        res = self.colors.reset
        print(f"{col}►{res} {message}")

    def determine_delay(self, total):
        if total > 100:
            self.delay = 0.3
        elif total > 500:
            self.derlay = 0.2
        elif total > 1000:
            self.delay = 0.1
        elif total > 1500:
            self.delay = 0.0
        else:
            self.delay = 0.4

    def get_all_images(self):
        images = []
        valid = ['.jpg', '.jpeg', '.png']
        for image in os.scandir(self.cwd):
            path = os.path.join(self.cwd, image)
            ext = Path(path).suffix.lower()
            if ext in valid:
                images.append(image.name)
        if len(images) == 0:
            self.error("Ooops, no images found in this folder, exiting!")
            exit()
        else:
            images.sort()
            return images

    def title(self):
        yel = self.colors.yellow
        res = self.colors.reset
        lines = [
            "                   __              ",
            ".----.-----.-----.|__|.-----.-----.",
            "|   _|  -__|__ --||  ||-- __|  -__|",
            "|__| |_____|_____||__||_____|_____|",
            ""
        ]
        os.system('clear')
        for line in lines:
            print(f"{yel}{line}{res}")

    def check_input(self, value):
        # --- this returns False when value is integer
        # --- so we can break the loop in get_start_number
        try:
            value = int(value)
            return False
        except ValueError:
            self.error("That doesn't look like a number, does it?")
            return True

    def get_start_number(self):
        col = self.colors.yellow
        res = self.colors.reset
        loop = True
        count = 0
        while loop:
            count = input(f"{col}►{res} Start at      : ").lower()
            loop = self.check_input(count)
            print(f">>> {loop}")
        return int(count)

    def get_userinput(self, message):
        col = self.colors.yellow
        res = self.colors.reset
        answer = input(f"{col}►{res} {message}").lower()
        return answer

    def get_image_info(self, img):
        current_width = img.size[0]
        current_height = img.size[1]
        return current_width, current_height

    def convert_image(self, img, newname, png):
        if png:
            img.convert('RGB').save(newname, "JPEG")
        else:
            img.save(newname)

    def do_resize(self, image, newname):
        oldpath = os.path.join(self.cwd, image)
        newpath = os.path.join(self.cwd, newname)

        img = Image.open(oldpath)
        current_width, current_height = self.get_image_info(img)

        png = True if Path(oldpath).suffix.lower() == '.png' else False
        resized = True if current_width != self.basewidth else False

        if resized:
            self.info(f"Current ratio : {current_width}x{current_height}")
            wpercent = (self.basewidth / float(current_width))
            hsize = int((float(img.size[1]) * float(wpercent)))
            img = img.resize((self.basewidth, hsize), Image.Resampling.LANCZOS)
            self.info("Resizing the file...")
            self.convert_image(img, newpath, png)
            os.remove(oldpath)
            sleep(self.delay)

        return resized

    def run(self):
        images = self.get_all_images()
        counter = 1
        total = len(images)

        self.title()
        self.determine_delay(total)
        prefix = self.get_userinput("Prefix        : ")
        count = self.get_start_number()
        self.info(f"Basewidth    : {self.basewidth}px")

        for image in images:
            self.title()
            newname = f"{prefix}-{count:05}.jpg"
            percent = round((counter/total) * 100)
            self.message(f"Processing {counter:04}/{total:04} ({percent:3}%)")
            self.message(f"Resizing     : {image}")
            self.message(f"Renaming to  : {newname}")
            print()
            resized = self.do_resize(image, newname)
            if not resized:
                self.info("Renaming the file...")
                oldpath = os.path.join(self.cwd, image)
                newpath = os.path.join(self.cwd, newname)
                os.rename(oldpath, newpath)
                sleep(self.delay)
            count += 1
            counter += 1


if __name__ == "__main__":
    resize = Resize()
    resize.run()
