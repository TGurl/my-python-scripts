#!/usr/bin/env python
import os
import argparse
import shutil
from time import sleep
from dataclasses import dataclass


@dataclass
class Config:
    title: str = "Create7z"
    version: str = "v0.8"


class Colors:
    reset = "\033[0m"
    red = "\033[31;1m"
    green = "\033[32;1m"
    yellow = "\033[33;1m"
    blue = "\033[34;1m"
    pink = "\033[35;1m"
    cyan = "\033[36;1m"
    white = "\033[37;1m"


class TUI:
    def __init__(self):
        pass

    def render_title(self, title='Title Here'):
        cya = Colors.cyan
        yel = Colors.yellow
        res = Colors.reset
        line = (len(title) + 2) * "-"
        os.system('clear')
        print(f"{cya}{line}")
        print(f" {yel}{title}")
        print(f"{cya}{line}{res}")

    def error(self, msg):
        red = Colors.red
        cya = Colors.cyan
        res = Colors.reset
        print(f"{red}>{res} {msg}")
        print(f"{cya}>{res} Exiting...")
        exit()

    def message(self, msg):
        col = Colors.cyan
        gre = Colors.green
        res = Colors.reset
        if msg == 'Done...':
            print(f"{gre}>{res} {msg}")
        else:
            print(f"{col}>{res} {msg}")


class Create7z:
    def __init__(self, args):
        self.tui = TUI()
        self.full_title = Config.title + ' ' + Config.version
        self.args = args
        self.dest = ''
        self.destpath = os.path.join(
            os.path.expanduser('~'),
            'Games',
            'archives'
        )
        self.sexpath = os.path.join(
            os.path.expanduser('~'),
            'USB',
            'sexgames'
        )
        self.keeppath = os.path.join(
            self.sexpath,
            'keep'
        )

    def create_archive(self):
        self.tui.message(f"Creating {self.args.folder}.7z...")
        cmd = f"7z a -r {self.args.folder}.7z {self.args.folder}"
        os.system(f"sh {cmd} >/dev/null 2>&1")

    def move_archive(self):
        col = Colors.blue
        res = Colors.reset
        self.tui.message("Moving archive, please wait...")
        archive = self.args.folder + ".7z"
        path = os.path.join(self.dest, archive)
        print(f"  {col}>>{res} {path}")
        shutil.move(archive, self.dest)

    def check_if_archive_exists(self):
        archive = self.args.folder + '.7z'
        path = os.path.join(self.dest, archive)
        if os.path.isfile(path):
            archive = self.args.folder + ".7z"
            msg = f"{archive} already exists in it's detination!"
            self.tui.error(msg)

    def remove_folder(self):
        self.tui.message("Removing source folder...")
        shutil.rmtree(self.args.folder)

    def run(self):
        if self.args.dest is None:
            self.dest = self.destpath
        elif self.args.dest.lower() == 'usb':
            self.dest = self.sexpath
        elif self.args.dest.lower() == 'keep':
            self.dest = self.keeppath

        self.tui.render_title('Create7z v0.8')
        self.check_if_archive_exists()
        self.create_archive()
        self.move_archive()
        if self.args.remove:
            self.remove_folder()
        self.tui.message("Done...")


if __name__ == "__main__":
    # Setup argparser
    dsc = 'Create a 7z archive of a give folder.'
    parser = argparse.ArgumentParser(description=dsc)
    parser.add_argument('folder',
                        help='The folder to archive')
    parser.add_argument('-d', '--dest',
                        required=False,
                        help='Destination for the archive')
    parser.add_argument('-r', '--remove',
                        required=False,
                        help='Remove folder afterwards',
                        action='store_true')
    args = parser.parse_args()

    app = Create7z(args)
    app.run()
